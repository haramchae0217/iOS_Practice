import UIKit

/*
 (동기 / 비동기) * (직렬 / 동시)
 1. 동기 / 직렬
 2. 동기 / 동시
 3. 비동기 / 직렬
 4. 비동기 / 동시
 
 main thread, background

 main thread가 다른 스레드에서 작업을 하도록 시킨 후 ~
 
 동기 / 비동기
 동기(sync) : 해당 작업이 끝날 때까지 대기. -> main thread가 block상태 (얘는 앞의 작업이 끝날 때까지 아무것도 할 수 없는 상태)
 -> main.sync : UI를 업데이트 해주는 작업을 할 수 없기 때문에 앱이 멈춘거같은 상황이 발생한다.
 -> 고급지게 : main스레드가 해당 작업이 끝날 때까지 block되므로, 아무것도 실행할 수 없는 상태가 된다. 큐에 등록된 작업이 시작되지 못하고 끝나지도 않는 deadlock이 발생한다.
 
 비동기(async) : 작업이 끝나기를 기다리지 않고 다음 작업을 진행한다.
 Q. 비동기가 왜 필요한가??
 - 네트워크 통신작업을 통해서 데이터를 다운받을 때 필요.
 - ex) 용량이 매우 큰 이미지의 경우, 다운로드 되는데 많은 시간이 소요되고 얼마나 걸릴지 알 수 없다.
 고급지게 : 네트워크 통신 작업(이미지 다운)을 기다렸다가 다음작업(화면 갱신)을 처리 하려고 하면 비효율적이다.
 만약 큰 용량의 이미지를 다운받는다고 하면 사용자 입장에서는 멈췄다고 느낄 수 있다.
 
 직렬(serial) : 나 이외의 다른 하나의 스레드에 작업을 넘기는 것
 직렬이 필요한 이유 : 작업에도 순서가 중요한 경우가 있어서 필요하다.
 
 동시(concurrent) : 하나의 스레드가 아닌 여러개의 스레드에 작업을 분산 시키는 것(몇개를 누구에게 분산할 지는 OS가 판단해서 처리)
 
 ----------------------------------------------------------------------------------------------------
 
 대략적으로 언제 무엇을 쓰면 좋을까?
  - 순서가 중요한 작업 -> ex)이미지 다운 이후 화면 리로드 -> 직렬
  - 각각의 독립적이지만 유사한 작업 -> ex) 대용량 이미지 여러개를 다운받는 작업 -> 동시
 
 ----------------------------------------------------------------------------------------------------
 
 비동기 vs 동시
 비동기 : 작업을 기다릴지 말지 선택.
 동시 : 한쓰레드로 작업할지 여러쓰레드로 작업을 할지 결정.
 
 ----------------------------------------------------------------------------------------------------
 
*/

// 백그라운드에서 순서대로 하는경우는 없음.

DispatchQueue.global().async {
    for i in 1...5 {
        print(i)
    }
    print("global ok")

    DispatchQueue.main.async {
        for i in 6...10 {
            print(i)
        }
        print("main ok")
    }
    print("all ok")
}

DispatchQueue.main.async {
    for i in 11...15 {
        print(i)
    }
    print("main ok")
    
    DispatchQueue.global().async {
        for i in 16...20 {
            print(i)
        }
        print("global ok")
    }
    print("all ok")
}
